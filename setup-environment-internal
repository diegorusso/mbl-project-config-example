#!/bin/bash
# -*- mode: shell-script-mode; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*-
#
# Based on: setup-environment-internal
# In open-source project: https://github.com/96boards/oe-rpb-manifest
#
# Original file: Copyright (C) 2012-13 O.S. Systems Software LTDA.
# Modifications: Copyright (c) 2018-2019 Arm Limited and Contributors. All rights reserved.
#
# SPDX-License-Identifier: GPL-2.0-only
#
# Authored-by:  Otavio Salvador <otavio@ossystems.com.br>
# Adopted to Angstrom:  Khem Raj <raj.khem@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

# Handle EULA if needed.
#
# We assume that there can only be a single EULA for the current MACHINE and
# that the EULA can be accepted by writing a value to a BitBake variable in the
# config (auto.conf).
#
# If we find a EULA for the current MACHINE then, by default, we prompt the
# user to accept the EULA, and if they accept, we record this by setting a
# BitBake variable to some value.
#
# Alternatively, this script will automatically accept the EULA for a MACHINE
# if the environment variable ACCEPT_EULA_${MACHINE_STR} is non-empty, where
# ${MACHINE_STR} is the name of the MACHINE with all hyphens and the "-mbl"
# suffix removed.
#
# The location of the EULA, the name of the BitBake variable and the value to
# write to that variable are, in general, MACHINE (or at least BSP) dependent.
# The "case" statement below is used to define these three things for each
# MACHINE.
#
# The default case is a general pattern for EULA path, BitBake variable, and
# value that was used by this script before it was adopted by MBL OS. This
# scheme is used by e.g. meta-qcom.
#
# The proper OE way of dealing with commercial licenses and EULAs (using
# LICENSE_FLAGS and LICENSE_FLAGS_WHITELIST) is not supported here - MBL OS
# does not yet support any MACHINES with BSPs that use LICENSE_FLAGS, and in
# any case, it would be difficult to actually find the relevant EULAs and
# accept them before starting a build.
#
# FIXME: there is a potential issue if the same $MACHINE is set in more than
# one layer.. but we should assert that earlier
mbl_eula_handle () {
    EULA_REJECTED=0

    NON_MBL_MACHINE="${MACHINE%-mbl}"

    # remove '-' since we are constructing an environment variable name here
    EULA_ACCEPT_ENV_VAR="$(echo "ACCEPT_EULA_${NON_MBL_MACHINE}" | sed 's/-//g')"

    case "$NON_MBL_MACHINE" in
        # MBL OS also supports imx7s-warp and imx7d-pico from meta-freescale, but
        # we don't use recipes for those MACHINEs that require acceptance of a
        # EULA. If we start using recipes covered by a EULA without updating this
        # code then those recipes will fail to build due to the missing
        # ACCEPT_FSL_EULA variable.
    imx8mmevk)
        EULA_PATH="../layers/meta-freescale/EULA"
        EULA_ACCEPT_BB_VAR="ACCEPT_FSL_EULA"
        EULA_ACCEPT_BB_VALUE="1"
        ;;
    *)
        EULA_PATH=$(find ../layers -path "*/conf/eula/${NON_MBL_MACHINE}" -print | grep -v scripts | grep -v openembedded-core | grep -v meta-linaro || true)
        EULA_ACCEPT_BB_VAR="ACCEPT_EULA_${NON_MBL_MACHINE}"
        EULA_ACCEPT_BB_VALUE="1"
        ;;
    esac

    if [ -n "$EULA_PATH" ]; then

        # Check if the EULA has already been accepted before
        if [ ! -f "${EULA_ACCEPT_ENV_VAR}" ]; then
            # NOTE: indirect reference / dynamic variable
            if [ -n "${!EULA_ACCEPT_ENV_VAR}" ]; then
                # The EULA_ACCEPT_ENV_VAR variable is set in the environment, so we
                # just configure EULA_ACCEPT_BB_VAR in auto.conf and remove any previous
                # occurrence
                sed -i "/${EULA_ACCEPT_BB_VAR}/d" conf/auto.conf
                echo "${EULA_ACCEPT_BB_VAR} = \"${EULA_ACCEPT_BB_VALUE}\"" >> conf/auto.conf
                # Create a file to indicate that the EULA was already accepted
                touch "${EULA_ACCEPT_ENV_VAR}"
            else
                # so we need to ask user if he/she accepts the EULA:
                REJECT_COUNT=0
                cat <<EOF

The BSP for $NON_MBL_MACHINE depends on packages and firmware which are covered by an End
User License Agreement (EULA). To have the right to use these binaries
in your images, you need to read and accept the following...

EOF

                echo
                REPLY=
                while [ -z "$REPLY" ]; do
                    echo -n "Would you like to read the EULA ? (y/n) "
                    read -r REPLY
                    case "$REPLY" in
                        y|Y)
                            READ_EULA=1
                            ;;
                        n|N)
                            READ_EULA=0
                            EULA_REJECTED=1
                            ;;
                        *)
                            REJECT_COUNT=$((REJECT_COUNT+1))
                            if [ $REJECT_COUNT -eq 3 ]; then
                                REPLY=q
                                READ_EULA=0
                                EULA_REJECTED=1
                            else
                                REPLY=
                            fi
                            ;;
                    esac
                done


                if [ "$READ_EULA" = 1 ]; then
                    more -d "${EULA_PATH}"
                    echo
                    REPLY=
                    while [ -z "$REPLY" ]; do
                        echo -n "Do you accept the EULA you just read? (y/n) "
                        read -r REPLY
                        case "$REPLY" in
                            y|Y)
                                echo "EULA has been accepted."
                                sed -i "/${EULA_ACCEPT_BB_VAR}/d" conf/auto.conf
                                echo "${EULA_ACCEPT_BB_VAR} = \"${EULA_ACCEPT_BB_VALUE}\"" >> conf/auto.conf
                                # Create a file to indicate that the EULA was already accepted
                                touch "${EULA_ACCEPT_ENV_VAR}"
                                ;;
                            n|N)
                                echo "EULA has not been accepted."
                                sed -i "/${EULA_ACCEPT_BB_VAR}/d" conf/auto.conf
                                EULA_REJECTED=1
                                ;;
                            *)
                                REPLY=
                                ;;
                        esac
                    done
                fi
            fi
        fi
    fi
    return $EULA_REJECTED
}

RPBcleanup() {
        unset MACHINETABLE MACHLAYERS DISTRO_DIRNAME OEROOT
        unset ITEM MANIFESTS EULA EULA_MACHINE REPLY READ_EULA
        unset usage oldmach

        if [ -n "$BUILDDIR" ]; then
                export BUILDDIR
        fi
}
trap RPBcleanup RETURN

if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
    return
fi


DISTRO="mbl"

# Avoid symlinks as it can cause modules (such as lvm2) to fail to build
OEROOT=$(pwd -P)
cd "$OEROOT"
if [ -n "$ZSH_VERSION" ]; then
    setopt sh_word_split
    setopt clobber
elif [ -n "$BASH_VERSION" ]; then
    set +o noclobber
fi

usage () {
    cat <<EOF

Usage: [MACHINE=<MACHINE>] source ${BASH_SOURCE[0]} [BUILDDIR]

If no MACHINE is set, list all possible machines, and ask user to choose.
If no BUILDIR is set, it will be set to build-$DISTRO.

EOF
}

if [ $# -gt 1 ]; then
    usage
    return 1
fi
# create a common list of "<machine>(<layer>)", sorted by <machine>
# Blacklist OE-core and meta-linaro, we only want 96boards + vendor layers
MACHLAYERS=$(find layers -print | grep "conf/machine/.*\.conf" | grep -v scripts | grep -v openembedded-core | grep -v meta-linaro | sed -e 's/\.conf//g' -e 's/layers\///' | awk -F'/conf/machine/' '{print $NF "(" $1 ")"}' | LANG=C sort)

if [ -z "${MACHINE}" ]; then
    # whiptail
    which whiptail > /dev/null 2>&1
    if [ $? -eq 0 ]; then
        MACHINETABLE=
        for ITEM in $MACHLAYERS; do
            MACHINETABLE="${MACHINETABLE} $(echo "$ITEM" | cut -d'(' -f1) $(echo "$ITEM" | cut -d'(' -f2 | cut -d')' -f1)"
        done
        MACHINE=$(whiptail --title "Available Machines" --menu \
            "Please choose a machine" 0 0 20 \
            ${MACHINETABLE} 3>&1 1>&2 2>&3)
    fi

    # dialog
    if [ -z "$MACHINE" ]; then
        which dialog > /dev/null 2>&1
        if [ $? -eq 0 ]; then
            MACHINETABLE=
            for ITEM in $MACHLAYERS; do
                MACHINETABLE="$MACHINETABLE $(echo "$ITEM" | cut -d'(' -f1) $(echo "$ITEM" | cut -d'(' -f2 | cut -d')' -f1)"
            done
            MACHINE=$(dialog --title "Available Machines" --menu "Please choose a machine" 0 0 20 $MACHINETABLE 3>&1 1>&2 2>&3)
        fi
    fi
fi


# guard against Ctrl-D or cancel
if [ -z "$MACHINE" ]; then
    echo "To choose a machine interactively please install whiptail or dialog."
    echo "To choose a machine non-interactively please use the following syntax:"
    echo "    MACHINE=<your-machine> . ./setup-environment"
    echo ""
    echo "Press <ENTER> to see a list of your choices"
    read -r
    echo "$MACHLAYERS" | sed -e 's/(/ (/g' | sed -e 's/)/)\n/g' | sed -e 's/^ */\t/g'
    return
fi

if [ -z "${SDKMACHINE}" ]; then
    SDKMACHINE='x86_64'
fi

MANIFESTS="${OEROOT}"/.repo/manifests

# we can be called with only 1 parameter max, <build> folder, or default to build-$distro
BUILDDIR=build-$DISTRO
if [ $# -eq 1 ]; then
    BUILDDIR=$1
fi
BUILDDIR=$OEROOT/$BUILDDIR

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export MACHINE=${MACHINE}
export PATH=$(echo "${PATH}" | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//')
export PATH="${OEROOT}"/layers/openembedded-core/scripts:"${OEROOT}"/bitbake/bin:"${OEROOT}"/.repo/repo:"${PATH}"
#remove duplicate path entries
export PATH=$(echo "$PATH" | awk -F: '{for (i=1;i<=NF;i++) { if ( !x[$i]++ ) printf("%s:",$i); }}' | sed 's/:$//')
# Make sure Bitbake doesn't filter out the following variables from our
# environment. Including allowing for a shared download directory (DL_DIR)
export BB_ENV_EXTRAWHITE="MACHINE DISTRO TCLIBC TCMODE GIT_PROXY_COMMAND http_proxy ftp_proxy https_proxy all_proxy ALL_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY SDKMACHINE BB_NUMBER_THREADS DL_DIR"

# Helper command for building images for mixed 32bit/64bit
# ARM builds. The command allow to specify a secondary MACHINE
# and image that will be built next to the primary target.
# If no secondary image is specified the rpb-minimal-image image
# will be built.


bitbake_secondary_image () {
    BITBAKE_OPTIONS=""
    unset EXTRA_MACHINE
    unset SECONDARY_IMAGE

    SECONDARY_IMAGE='rpb-minimal-image'
    while [[ $# -gt 1 ]]
    do
        key="$1"
        case $key in
            --extra-machine)
            EXTRA_MACHINE="$2"
            shift
            ;;
            --secondary-image)
            SECONDARY_IMAGE="$2"
            shift
            ;;
        *)
            BITBAKE_OPTIONS=$BITBAKE_OPTIONS" "$1
        ;;
    esac
    shift
    done
    BITBAKE_OPTIONS=$BITBAKE_OPTIONS" "$1
    if [ -z "$EXTRA_MACHINE" ]
    then
        echo "   Error: you need to run $FUNCNAME with --extra-machine agument"
        echo
        echo "   Example:"
        echo "     $ $FUNCNAME --extra-machine hikey rpb-weston-image"
        return
    fi

    if [ "$EXTRA_MACHINE" == "$MACHINE" ]
    then
        echo "Error: the extra machine must be different from the machine you already set using setup-environment: "$MACHINE
        return
    fi

    echo "Building first image. MACHINE:" $EXTRA_MACHINE " DISTRO:" $DISTRO

    MACHINE=$EXTRA_MACHINE bitbake $SECONDARY_IMAGE

    if [ $? != 0 ]; then
        printf "Error building image"
        return
    fi
    echo "Building second image. MACHINE:" $MACHINE " DISTRO:" $DISTRO

    MACHINE=$MACHINE bitbake $BITBAKE_OPTIONS
}
mkdir -p "${BUILDDIR}"/conf && cd "${BUILDDIR}"
if [ -f "conf/auto.conf" ]; then
    oldmach=$(egrep "^MACHINE" "conf/auto.conf" | sed -e 's%^MACHINE ?= %%' | sed -e 's/^"//'  -e 's/"$//')
fi

if [ -e conf/checksum -a "${MACHINE}" = "$oldmach" ]
then
    # Even for the case we do not need to perform the setup for
    # the first build we still need to check if the EULA needs
    # to be accepted
    mbl_eula_handle
    if [ $? -eq 1 ]
    then
        echo "ERROR: EULA Has not been read and accepted."
        return 1
    fi
    sha512sum --quiet -c conf/checksum > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
       return
    fi
fi

# evaluate new checksum and regenerate the conf files
sha512sum "${OEROOT}"/conf/setup-environment-internal 2>&1 > conf/checksum

ln -sf "${OEROOT}"/conf/local.conf conf/local.conf

# Setup the bblayers.conf
# Target specific BSP layers are specified in a bblayers_${MACHINE}.conf
# file. This environment setup script the replaces ##MACHINE## tag in
# bblayers.conf with that specified by MACHINE.
rm -f conf/bblayers.conf
rm -f conf/bblayers_*.conf
sed -e "s|##MACHINE##|$MACHINE|g"  "${OEROOT}"/conf/bblayers.conf > conf/bblayers.conf
ln -sf "${OEROOT}"/conf/bblayers_${MACHINE}.conf conf/bblayers_${MACHINE}.conf


ln -sf "${MANIFESTS}"/README.md README.md

ln -sf "${MANIFESTS}" "${OEROOT}"/layers/

DISTRO_DIRNAME=$(echo "${DISTRO}" | sed 's#[.-]#_#g')

cat > conf/auto.conf <<EOF
DISTRO ?= "${DISTRO}"
MACHINE ?= "${MACHINE}"
SDKMACHINE ?= "${SDKMACHINE}"

# Extra options that can be changed by the user
INHERIT += "rm_work"
EOF

mbl_eula_handle
if [ $? -eq 1 ]
then
    echo "ERROR: EULA Has not been read and accepted."
    return 1
fi


if [ ! -e conf/site.conf ]; then
    cat > conf/site.conf <<_EOF

SCONF_VERSION = "1"

# Where to store sources
DL_DIR ?= "${OEROOT}/downloads"

# Where to save shared state
SSTATE_DIR ?= "${OEROOT}/sstate-cache"

TMPDIR = "${BUILDDIR}/tmp-${DISTRO_DIRNAME}"

# Go through the Firewall
#HTTP_PROXY        = "http://${PROXYHOST}:${PROXYPORT}/"

_EOF
fi

cat <<EOF

Welcome to Mbed Linux OS (MBL)

Your build environment has been configured with:

    MACHINE = ${MACHINE}
    SDKMACHINE = ${SDKMACHINE}
    DISTRO = ${DISTRO}

You can now run 'bitbake <target>'

Some of common targets are:
    mbl-image-production
    mbl-image-development

EOF
